apply plugin: 'java-library'
apply plugin: 'eclipse'

version = '1.2.0'

println "ICY_HOME=${System.env.ICY_HOME}"
println project.name + " " + version

configurations {
  extraLibs // configuration that holds jars to include in the jar
  implementation.extendsFrom(extraLibs)
}

repositories {
  jcenter()
  mavenCentral()
  
  /*flatDir {
    dirs "$rootProject.projectDir/jars/BigImageTools"
  }*/
}
dependencies {
  // 1.1 External libraries 
  extraLibs 'org.ehcache:ehcache:3.4.0'
  extraLibs 'javax.cache:cache-api:1.0.0'
  extraLibs 'org.apache.commons:commons-math3:3.0'

  // 1.2. Icy libraries
  implementation files("${System.env.ICY_HOME}/icy.jar") // Icy core

  implementation files("${System.env.ICY_HOME}/lib/bioformats.jar") // bioformats
  implementation files("${System.env.ICY_HOME}/lib/vecmath.jar") // vecmath
  implementation files("${System.env.ICY_HOME}/lib/jai_core.jar") // JAI
  
  implementation files("${System.env.ICY_HOME}/plugins/adufour/ezplug/EzPlug.jar") // EzPlug
  implementation files("${System.env.ICY_HOME}/plugins/adufour/blocks/Blocks.jar") // Blocks
  implementation files("${System.env.ICY_HOME}/plugins/adufour/protocols/Protocols.jar") // Protocols
  implementation files("${System.env.ICY_HOME}/plugins/adufour/thresholder/Thresholder.jar") // Thresholder
  implementation files("${System.env.ICY_HOME}/plugins/danyfel80/bigimage/io/BigImageTools.jar") // Big image tools

  //extraLibs ':BigImageTools:0.2.2.2'

  testImplementation 'org.hamcrest:hamcrest-all:1.3'
  testImplementation 'junit:junit:4.12'
}

// Make an icy plugin project
eclipse {
  classpath.downloadJavadoc = true
  project.natures += ['icy.icy4eclipse.core.icynature']
}

jar {
  from {
    configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.output
  from sourceSets.main.java
  from configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
}

//task sourcesJar(type: Jar, dependsOn: classes) {
//  classifier = 'sources'
//  from sourceSets.main.allSource
//}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
  //archives javadocJar
}